

# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/tsconfig.app.json

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/tsconfig.node.json

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/vite.config.ts

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/eslint.config.js

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/createfrontend.sh

#!/bin/bash

# Build the Docker image
docker build -t react-frontend .

# Exit if the build failed
if [ $? -ne 0 ]; then
  exit 1
fi

# Run the Docker container with environment variables from .env
docker run --rm \
  --name react-container \
  -p 5173:5173 \
  -d react-frontend


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/public/vite.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/App.css

#root {
  width: 100%;
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/index.css

/*:root {*/
/*  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;*/
/*  line-height: 1.5;*/
/*  font-weight: 400;*/

/*  color-scheme: light dark;*/
/*  color: rgba(255, 255, 255, 0.87);*/
/*  background-color: #242424;*/

/*  font-synthesis: none;*/
/*  text-rendering: optimizeLegibility;*/
/*  -webkit-font-smoothing: antialiased;*/
/*  -moz-osx-font-smoothing: grayscale;*/
/*}*/

/*a {*/
/*  font-weight: 500;*/
/*  color: #646cff;*/
/*  text-decoration: inherit;*/
/*}*/
/*a:hover {*/
/*  color: #535bf2;*/
/*}*/

/*body {*/
/*  margin: 0;*/
/*  display: flex;*/
/*  place-items: center;*/
/*  min-width: 320px;*/
/*  min-height: 100vh;*/
/*}*/

/*h1 {*/
/*  font-size: 3.2em;*/
/*  line-height: 1.1;*/
/*}*/

/*button {*/
/*  border-radius: 8px;*/
/*  border: 1px solid transparent;*/
/*  padding: 0.6em 1.2em;*/
/*  font-size: 1em;*/
/*  font-weight: 500;*/
/*  font-family: inherit;*/
/*  background-color: #1a1a1a;*/
/*  cursor: pointer;*/
/*  transition: border-color 0.25s;*/
/*}*/
/*button:hover {*/
/*  border-color: #646cff;*/
/*}*/
/*button:focus,*/
/*button:focus-visible {*/
/*  outline: 4px auto -webkit-focus-ring-color;*/
/*}*/

/*@media (prefers-color-scheme: light) {*/
/*  :root {*/
/*    color: #213547;*/
/*    background-color: #ffffff;*/
/*  }*/
/*  a:hover {*/
/*    color: #747bff;*/
/*  }*/
/*  button {*/
/*    background-color: #f9f9f9;*/
/*  }*/
/*}*/


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/vite-env.d.ts

/// <reference types="vite/client" />


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/main.tsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App/>
  </StrictMode>,
)


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/App.tsx

// App.tsx
import './App.css';
import Login from './components/UserForms/login';
import Register from './components/UserForms/register';
import LandingPage from './components/Pages/LandingPage';
import SessionPage from './components/Pages/SessionPage';
import About from './components/Pages/about.tsx';
import Layout from './components/layout.tsx';
import { SnackbarProvider } from 'notistack';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

function App() {

  const RequireAuth = ({ children }: { children: JSX.Element }) => {
    return localStorage.getItem('user_id') ? children : <Navigate to="/login" replace />;
  };

  return (
    <SnackbarProvider maxSnack={3} anchorOrigin={{ vertical: 'top', horizontal: 'right' }}>
      <Router>
        <Routes>
          {/* Public Routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />

          {/* Protected Routes */}
          <Route
              path="/dashboard"
              element={
                <RequireAuth>
                  <Layout>
                    <LandingPage />
                  </Layout>
                </RequireAuth>
              }
          />
          <Route
              path="/chart"
              element={
                <RequireAuth>
                  <Layout>
                    <SessionPage />
                  </Layout>
                </RequireAuth>
              }
          />
            <Route
                path="/about"
                element={
                    <RequireAuth>
                        <Layout>
                            <About />
                        </Layout>
                    </RequireAuth>
                }
            />

            {/* Redirect all other routes */}
          <Route
              path="*"
              element={<Navigate to="/dashboard" replace />}
          />
        </Routes>
      </Router>
    </SnackbarProvider>
  );
}

export default App;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/layout.tsx

// components/Layout.tsx
import React from 'react';
import { Box } from '@mui/material';
import Sidebar from './SideBar/sidebar';

interface LayoutProps {
    children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
    return (
        <Box sx={{ display: 'flex' }}>
            <Sidebar />
            <Box
                component="main"
                sx={{ flexGrow: 1, p: 3 }}
            >
                {children}
            </Box>
        </Box>
    );
};

export default Layout;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/SideBar/sidebar.tsx

// components/SideBar/sidebar.tsx
import React, { useState, useEffect } from 'react';
import {
    Drawer,
    List,
    ListItemIcon,
    ListItemText,
    Toolbar,
    Divider,
    ListItemButton,
    Box,
    Collapse,
    CircularProgress,
} from '@mui/material';
import {
    Info,
    Dashboard,
    BarChart,
    Logout,
    ExpandLess,
    ExpandMore,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import api from '../../utils/api'; // Adjust the import path to your API module

const drawerWidth = 200;

interface Session {
    id: number;
    name: string;
}

const Sidebar: React.FC = () => {
    const navigate = useNavigate();
    const [sessions, setSessions] = useState<Session[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [sessionsOpen, setSessionsOpen] = useState<boolean>(false);

    useEffect(() => {
        getUserSessions();
    }, []);

    const getUserSessions = async () => {
        setLoading(true);
        try {
            const userId = localStorage.getItem('user_id');
            const responseS = await api.get(`/users/session/all`, {
                params: { user_id: userId },
            });
            const sessionData = responseS.data.data.reverse();

            // Transform sessions to have consistent property names
            const transformedSessions = sessionData.map((session: any) => ({
                id: session.id || session.session_id,
                name: session.name || session.session_name || `Session ${session.id || session.session_id}`,
            }));

            setSessions(transformedSessions || []);
            console.log('Transformed sessions in Sidebar:', transformedSessions);
        } catch (error) {
            console.error('Error fetching user sessions', error);
        } finally {
            setLoading(false);
        }
    };

    const handleLogout = () => {
        // Remove user data from local storage
        localStorage.removeItem('user_id');
        localStorage.removeItem('username');
        localStorage.removeItem('user_type');
        // Redirect to login page
        navigate('/login');
    };

    const menuItems = [
        { text: 'About', icon: <Info />, path: '/about' },
        { text: 'Dashboard', icon: <Dashboard />, path: '/dashboard' },
    ];

    return (
        <Drawer
            variant="permanent"
            sx={{
                width: drawerWidth,
                flexShrink: 0,
                display: 'flex',
                flexDirection: 'column',
                [`& .MuiDrawer-paper`]: {
                    width: drawerWidth,
                    boxSizing: 'border-box',
                    display: 'flex',
                    flexDirection: 'column',
                },
            }}
        >
            <Toolbar />
            <Divider />
            <Box sx={{ flexGrow: 1 }}>
                <List>
                    {menuItems.map((item) => (
                        <ListItemButton
                            key={item.text}
                            onClick={() => navigate(item.path)}
                        >
                            <ListItemIcon>{item.icon}</ListItemIcon>
                            <ListItemText primary={item.text} />
                        </ListItemButton>
                    ))}

                    {/* Sessions dropdown */}
                    <ListItemButton onClick={() => setSessionsOpen(!sessionsOpen)}>
                        <ListItemIcon>
                            <BarChart />
                        </ListItemIcon>
                        <ListItemText primary="Sessions" />
                        {sessionsOpen ? <ExpandLess /> : <ExpandMore />}
                    </ListItemButton>
                    <Collapse in={sessionsOpen} timeout="auto" unmountOnExit>
                        <List component="div" disablePadding>
                            {loading ? (
                                <ListItemButton sx={{ pl: 4 }}>
                                    <ListItemIcon>
                                        <CircularProgress size={20} />
                                    </ListItemIcon>
                                    <ListItemText primary="Loading..." />
                                </ListItemButton>
                            ) : sessions.length > 0 ? (
                                sessions.map((session) => (
                                    <ListItemButton
                                        key={session.id}
                                        sx={{ pl: 4 }}
                                        onClick={() => navigate(`/sessions/${session.id}`)}
                                    >
                                        <ListItemText
                                            primary={session.name || `Session ${session.id}`}
                                        />
                                    </ListItemButton>
                                ))
                            ) : (
                                <ListItemButton sx={{ pl: 4 }}>
                                    <ListItemText primary="No sessions available" />
                                </ListItemButton>
                            )}
                        </List>
                    </Collapse>
                </List>
            </Box>
            <Divider />
            <List>
                <ListItemButton onClick={handleLogout}>
                    <ListItemIcon>
                        <Logout />
                    </ListItemIcon>
                    <ListItemText primary="Logout" />
                </ListItemButton>
            </List>
        </Drawer>
    );
};

export default Sidebar;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/buttons/SessionLink.tsx

import React from 'react';
import moment from 'moment';
import { Card, CardActionArea, CardContent, Typography } from '@mui/material';
import { useNavigate } from 'react-router-dom';

interface Session {
    session_id: string;
    session_name: string;
    time_start: string;
    time_end: string;
}

interface SessionLinkProps {
    session: Session;
}

const SessionLink: React.FC<SessionLinkProps> = ({ session }) => {
    // Use the navigate hook to navigate to the chart page
    const navigate = useNavigate();
    
    // If the current session is live
    const isLive = session.time_end === null;
    
    const handleClick = () => {
        const url = new URL(`/chart`, window.location.origin);
        // Append the session ID to the URL
        url.searchParams.append('session_id', session.session_id);
        url.searchParams.append('live', isLive ? 'true' : 'false');
        // Navigate to the new URL
        navigate(url.pathname + url.search);
    };

    return (
        <Card style={{ width: '300px' }}>
            <CardActionArea onClick={handleClick}>
                <CardContent style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <Typography variant="h5" component="div">
                        {session.session_name}
                    </Typography>
                    {
                        isLive ? (
                            <Typography variant="body2" color="error">
                                Live 🔴
                            </Typography>
                        ) : (
                            <Typography variant="body2" color="textSecondary">
                                {moment(session.time_start).fromNow()}
                            </Typography>
                        )
                    }
                </CardContent>
            </CardActionArea>
        </Card>
    );
};

export default SessionLink;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/buttons/AddPlayer.tsx

import React, { useState } from 'react';
import Button from '@mui/material/Button';
import AddPlayerModal from '../modals/AddPlayerModal';

interface NewSessionProps {
    onAddPlayer: () => void;
}

const NewSession: React.FC<NewSessionProps> = ({ onAddPlayer }) => {

    const [open, setOpen] = useState(false);

    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    return (
        <>
            <Button variant="contained" color="primary" onClick={handleOpen}>
                Add a Player
            </Button>
            <AddPlayerModal open={open} handleClose={handleClose} onAddPlayer={onAddPlayer} />
        </>
    );
};

export default NewSession;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/buttons/NewSession.tsx

import React, { useState } from 'react';
import Button from '@mui/material/Button';
import CreateNewSession from '../modals/CreateNewSession';

interface NewSessionProps {
    onNewSession: () => void;
}

const NewSession: React.FC<NewSessionProps> = ({ onNewSession }) => {

    const [open, setOpen] = useState(false);

    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    return (
        <>
            <Button variant="contained" color="primary" onClick={handleOpen}>
                New Session +
            </Button>
            <CreateNewSession open={open} handleClose={handleClose} onNewSession={onNewSession} />
        </>
    );
};

export default NewSession;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/buttons/StopSession.tsx

import React, { useState } from 'react';
import Button from '@mui/material/Button';
import StopCurrentSession from '../modals/StopCurrentSession';

interface StopSessionProps {
    onStopSession: () => void;
}

const StopSession: React.FC<StopSessionProps> = ({ onStopSession }) => {

    const [open, setOpen] = useState(false);

    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    return (
        <>
            <Button variant="contained" color="error" onClick={handleOpen}>
                Stop Session -
            </Button>
            <StopCurrentSession open={open} handleClose={handleClose} onStopSession={onStopSession} />
        </>
    );
};

export default StopSession;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/UserForms/login.tsx

import React, { useState } from 'react';
import FormControl from '@mui/material/FormControl';
import { Input, InputLabel, Button, Box, Typography } from "@mui/material";
import { InputAdornment, IconButton } from "@mui/material";
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import { useNavigate } from 'react-router-dom';
import api from '../../utils/api';
import { useSnackbar } from 'notistack';

const Login: React.FC = () => {
    const [showPassword, setShowPassword] = useState(false);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    
    const navigate = useNavigate();
    const { enqueueSnackbar } = useSnackbar();

    const handleTogglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const handleLogin = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null); // Reset error before submitting
        try {
            const response = await api.post('/users/login/', {
                username: username,
                password: password
            });
            if (response.status === 200) {
                // Store user variables in localStorage
                localStorage.setItem('user_id', response.data.data.user_id);
                localStorage.setItem('user_type', response.data.data.user_type);
                localStorage.setItem('username', username);
                // Reset the fields after successful login
                setUsername('');
                setPassword('');
                // Debug message
                enqueueSnackbar(response.data.message, { variant: response.data.status.toLowerCase() });
                // Redirect to dashboard
                navigate('/dashboard');
            }
        } catch (error: any) {
            if (error.response) {
                // Server responded with a status other than 200 range
                enqueueSnackbar(error.response.data.message, { variant: error.response.data.status.toLowerCase() });
            } else if (error.request) {
                // Request was made but no response received
                enqueueSnackbar('No response from server. Please try again later.', { variant: 'error' });
            } else {
                // Something else happened while setting up the request
                enqueueSnackbar('An unexpected error occurred. Please try again.', { variant: 'error' });
            }
            console.error('Error stopping session:', error);
        }
    };

    return (
        <Box
            component="form"
            onSubmit={handleLogin}
            sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 2,
                padding: 3,
                maxWidth: 400,
                margin: '0 auto',
            }}
        >
            <Typography variant="h4" gutterBottom>
                Login
            </Typography>
            <FormControl fullWidth>
                <InputLabel htmlFor="username">Username</InputLabel>
                <Input
                    id="username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                />
            </FormControl>

            <FormControl fullWidth>
                <InputLabel htmlFor="password">Password</InputLabel>
                <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    endAdornment={
                        <InputAdornment position="end">
                            <IconButton
                                onClick={handleTogglePasswordVisibility}
                                edge="end"
                            >
                                {showPassword ? <VisibilityOff /> : <Visibility />}
                            </IconButton>
                        </InputAdornment>
                    }
                />
            </FormControl>

            <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                sx={{ mt: 2 }}
            >
                Login
            </Button>

            {error && (
                <Typography color="error" variant="body1">
                    {error}
                </Typography>
            )}

            <Typography variant="body2" sx={{ mt: 2 }}>
                Don't have an account?{' '}
                <Button color="primary" onClick={() => navigate('/register')}>
                    Register
                </Button>
            </Typography>            
        </Box>
    );
};

export default Login;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/UserForms/register.tsx

import React, { useState } from 'react';
import FormControl from '@mui/material/FormControl';
import { Input, InputLabel, Button, Box, Typography, Select, MenuItem } from "@mui/material";
import { InputAdornment, IconButton } from "@mui/material";
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import api from '../../utils/api'
import { useNavigate } from 'react-router-dom';
import { useSnackbar } from 'notistack';

const Register: React.FC = () => {
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [phoneNumber, setPhoneNumber] = useState('');
    const [userType, setUserType] = useState('player');

    const navigate = useNavigate();
    const { enqueueSnackbar } = useSnackbar();
    
    const handleTogglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const handleToggleConfirmPasswordVisibility = () => {
        setShowConfirmPassword(!showConfirmPassword);
    };

    const handlePhoneNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const cleanedNumber = event.target.value.replace(/\D/g, '');
        const formattedNumber = cleanedNumber.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
        setPhoneNumber(formattedNumber);
    };

    const handleRegister = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null);

        if (password !== confirmPassword) {
            setError('Passwords do not match');
            return;
        }

        try {
            const response = await api.post('/users/register/', {
                username,
                email,
                password,
                user_type: userType,
                phone_number: phoneNumber,
            });
            if (response.status === 201) {
                // Reset the fields after successful registration
                setUsername('');
                setEmail('');
                setPassword('');
                setConfirmPassword('');
                // Debug message
                enqueueSnackbar(response.data.message, { variant: response.data.status.toLowerCase() });
                // Override local storage
                localStorage.removeItem('user_id');
                localStorage.removeItem('username');
                localStorage.removeItem('user_type');
                // Redirect to login page
                navigate('/login');
            }
        } catch (error: any) {
            if (error.response) {
                // Server responded with a status other than 200 range
                enqueueSnackbar(error.response.data.message, { variant: error.response.data.status.toLowerCase() });
            } else if (error.request) {
                // Request was made but no response received
                enqueueSnackbar('No response from server. Please try again later.', { variant: 'error' });
            } else {
                // Something else happened while setting up the request
                enqueueSnackbar('An unexpected error occurred. Please try again.', { variant: 'error' });
            }
            console.error('Error stopping session:', error);
        }
    };

    return (
        <Box
            component="form"
            onSubmit={handleRegister}
            sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 2,
                padding: 3,
                maxWidth: 400,
                margin: '0 auto',
            }}
        >
            <Typography variant="h4" gutterBottom>
                Register New Account
            </Typography>

            <FormControl fullWidth>
                <InputLabel htmlFor="username">Username</InputLabel>
                <Input
                    id="username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                />
            </FormControl>

            <FormControl fullWidth>
                <InputLabel htmlFor="email">Email</InputLabel>
                <Input
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                />
            </FormControl>

            <FormControl fullWidth>
              <InputLabel htmlFor="phoneNum">Phone Number</InputLabel>
              <Input
                id="phoneNum"
                value={phoneNumber}
                onChange={handlePhoneNumberChange} 
              />
            </FormControl>

            <FormControl fullWidth>
                <InputLabel htmlFor="password">Password</InputLabel>
                <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    endAdornment={
                        <InputAdornment position="end">
                            <IconButton
                                onClick={handleTogglePasswordVisibility}
                                edge="end"
                            >
                                {showPassword ? <VisibilityOff /> : <Visibility />}
                            </IconButton>
                        </InputAdornment>
                    }
                />
            </FormControl>

            <FormControl fullWidth>
                <InputLabel htmlFor="confirm-password">Confirm Password</InputLabel>
                <Input
                    id="confirm-password"
                    type={showConfirmPassword ? 'text' : 'password'}
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    endAdornment={
                        <InputAdornment position="end">
                            <IconButton
                                onClick={handleToggleConfirmPasswordVisibility}
                                edge="end"
                            >
                                {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                            </IconButton>
                        </InputAdornment>
                    }
                />
            </FormControl>

            <FormControl fullWidth>
                <InputLabel htmlFor="user-type" >I am signing up as a:</InputLabel>
                <Select
                    label={'I am signing up as a:'}
                    id="user-type"
                    value={userType}
                    onChange={(e) => setUserType(e.target.value)}
                    sx={{ height: 40 }}
                >
                    <MenuItem value="player">Player</MenuItem>
                    <MenuItem value="coach">Coach</MenuItem>
                </Select>
            </FormControl>

            {error && (
                <Typography variant="body2" color="error">
                    {error}
                </Typography>
            )}

            <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                sx={{ mt: 2 }}
            >
                Register
            </Button>

            {error && (
                <Typography variant="body2" color="error">
                    {error}
                </Typography>
            )}

            <Typography variant="body2" sx={{ mt: 2 }}>
                Already have an account?{' '}
                <Button color="primary" onClick={() => navigate('/login')}>
                    Log In
                </Button>
            </Typography>
        </Box>
    );
}

export default Register;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/UserForms/protected.tsx

// import React, { useEffect, useState } from 'react';
// import { Navigate } from 'react-router-dom';
// import api from '../../utils/api'; // Axios or Fetch API configuration
//
// interface ProtectedRouteProps {
//     children: React.ReactNode;
// }
//
// const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
//     const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);
//
//     useEffect(() => {
//         // Make an API call to check if the session is valid
//         const checkAuth = async () => {
//             try {
//                 const response = await api.get('/users/check-auth/', { withCredentials: true }); // API to check authentication status
//                 if (response.status === 200) {
//                     setIsAuthenticated(true); // User is authenticated
//                 }
//             } catch (error) {
//                 setIsAuthenticated(false); // User is not authenticated
//             }
//         };
//
//         checkAuth();
//     }, []);
//
//     // Wait for the authentication check to complete
//     if (isAuthenticated === null) {
//         return <div>Loading...</div>;
//     }
//
//     // If not authenticated, redirect to login
//     if (!isAuthenticated) {
//         return <Navigate to="/login" replace />;
//     }
//
//     // If authenticated, render the requested page
//     return <>{children}</>;
// };
//
// export default ProtectedRoute;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/AddPlayerModal.tsx

import api from '../../utils/api';
import React, { useState, useEffect } from 'react';
import { Modal, Box, TextField, Button, Typography, FormControl, InputLabel, Select, MenuItem } from '@mui/material';
import styles from './AddPlayerModal.module.css';
import { useSnackbar } from 'notistack';

interface AddPlayerModalProps {
    open: boolean
    handleClose: () => void;
    onAddPlayer: () => void;
}

interface Player {
    id: string;
    username: string;
}

const AddPlayerModal: React.FC<AddPlayerModalProps> = ({ open, handleClose, onAddPlayer }) => {

    const { enqueueSnackbar } = useSnackbar();

    // Get the userId from localStorage
    const userId = localStorage.getItem('user_id');

    const [loading, setLoading] = useState<boolean>(true);
    const [players, setPlayers] = useState<Player[]>([]);
    const [player, setPlayer] = useState('');

    const getPlayers = async () => {
        setLoading(true);
        // Get all the players
        const response = await api.get('/users/players/all/', { params: { user_id: userId } });
        // Set the state to the players
        setPlayers(response.data.data || []);
        setLoading(false);
    };

    const handleAddPlayer = async () => {
        // Make sure the userId is not null
        if (!userId) {
            console.error('User ID is null');
            return;
        }
        // Make sure the player is not empty
        if (!player) {
            console.error('Player is empty');
            return;
        }
        try {
            // Add a player to the coach's team
            const response = await api.post('/users/coach/players/', { user_id: userId, player_id: player });
            // Success message
            enqueueSnackbar(response.data.message, { variant: response.data.status.toLowerCase() });
            // Close the modal on successful addition
            handleClose();
            // Call the onAddPlayer callback to refresh the players
            onAddPlayer();
        } catch (error: any) {
            if (error.response) {
                // Server responded with a status other than 200 range
                enqueueSnackbar(error.response.data.message, { variant: error.response.data.status.toLowerCase() });
            } else if (error.request) {
                // Request was made but no response received
                enqueueSnackbar('No response from server. Please try again later.', { variant: 'error' });
            } else {
                // Something else happened while setting up the request
                enqueueSnackbar('An unexpected error occurred. Please try again.', { variant: 'error' });
            }
            console.error('Error stopping session:', error);
        }
    }

    // Get the players on mount
    useEffect(() => { getPlayers() }, []);

    return (
        <Modal open={open} onClose={handleClose}>
            <Box className={styles.modalBox}>
            <Typography variant="h6" component="h2" gutterBottom>
                Create New Session
            </Typography>
            <br />
            <br />
            <FormControl fullWidth>
                <InputLabel htmlFor="coach-player" >Add a player to the team:</InputLabel>
                <Select
                    label={'Add a player to the team:'}
                    id="coach-player"
                    value={player}
                    onChange={(e) => setPlayer(e.target.value)}
                    sx={{ height: 60 }}
                >
                    {
                        Array.isArray(players) && players.length > 0 ? (
                            players.map((p, index) => <MenuItem value={p.id.toString()} key={index}>{p.username}</MenuItem>)
                        ) : (
                            <MenuItem value="" disabled>No players available</MenuItem>
                        )
                    }
                </Select>
            </FormControl>
            <br />
            <br />
            <Button variant="contained" color="primary" onClick={handleAddPlayer}>
                Create Session
            </Button>
            </Box>
        </Modal>
    );
};

export default AddPlayerModal;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/StopCurrentSession.module.css

/* Main container within the modal */
.modalBox {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: var(--background-paper, #fff);
    box-shadow: 24px 24px 48px rgba(0, 0, 0, 0.1);
    padding: 16px;
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/StopCurrentSession.tsx

import api from '../../utils/api';
import React, { useState } from 'react';
import { Modal, Box, TextField, Button, Typography } from '@mui/material';
import styles from './StopCurrentSession.module.css';
import { useSnackbar } from 'notistack';

interface StopCurrentSessionProps {
    open: boolean
    handleClose: () => void;
    onStopSession: () => void;
}

const StopCurrentSession: React.FC<StopCurrentSessionProps> = ({ open, handleClose, onStopSession }) => {

    const { enqueueSnackbar } = useSnackbar();

    const handleStopSession = async () => {
        try {
            const response = await api.post('/users/session/end/', { user_id: localStorage.getItem('user_id') });
            // Success message
            enqueueSnackbar(response.data.message, { variant: response.data.status.toLowerCase() });
            // Close the modal on successful creation
            handleClose();
            // Call the onStopSession callback to refresh the sessions
            onStopSession();
        } catch (error: any) {
            if (error.response) {
                // Server responded with a status other than 200 range
                enqueueSnackbar(error.response.data.message, { variant: error.response.data.status.toLowerCase() });
            } else if (error.request) {
                // Request was made but no response received
                enqueueSnackbar('No response from server. Please try again later.', { variant: 'error' });
            } else {
                // Something else happened while setting up the request
                enqueueSnackbar('An unexpected error occurred. Please try again.', { variant: 'error' });
            }
            console.error('Error stopping session:', error);
        }
    };

    return (
        <Modal open={open} onClose={handleClose}>
            <Box className={styles.modalBox}>
                <Typography variant="h6" component="h2" gutterBottom>
                    Stop Your Current Session
                </Typography>
                <Typography variant="h6" component="p" gutterBottom>
                    Stopping your current session will end the tracking of metrics from the helmet.
                    The session data can then be viewed in the Metrics dashboard. 
                </Typography>
                <Button variant="contained" color="error" onClick={handleStopSession}>
                    Stop Session
                </Button>
            </Box>
        </Modal>
    );
};

export default StopCurrentSession;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/AddPlayerModal.module.css

/* Main container within the modal */
.modalBox {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: var(--background-paper, #fff);
    box-shadow: 24px 24px 48px rgba(0, 0, 0, 0.1);
    padding: 16px;
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/CreateNewSession.module.css

/* Main container within the modal */
.modalBox {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: var(--background-paper, #fff);
    box-shadow: 24px 24px 48px rgba(0, 0, 0, 0.1);
    padding: 16px;
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/modals/CreateNewSession.tsx

import api from '../../utils/api';
import React, { useState } from 'react';
import { Modal, Box, TextField, Button, Typography } from '@mui/material';
import styles from './CreateNewSession.module.css';
import { useSnackbar } from 'notistack';

interface CreateNewSessionProps {
    open: boolean
    handleClose: () => void;
    onNewSession: () => void;
}

const CreateNewSession: React.FC<CreateNewSessionProps> = ({ open, handleClose, onNewSession }) => {

    const { enqueueSnackbar } = useSnackbar();

    const [sessionName, setSessionName] = useState('');

    const handleSessionNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSessionName(event.target.value);
    };

    const handleCreateSession = async () => {
        // Get the userId from localStorage
        const userId = localStorage.getItem('user_id');
        // Make sure the userId is not null
        if (!userId) {
            console.error('User ID is null');
            return;
        }
        // Make sure the session name is not empty
        if (!sessionName) {
            console.error('Session name is empty');
            return;
        }
        try {
            // Create a new session with the session name and userId
            const response = await api.post('/users/session/start/', { session_name: sessionName, user_id: userId }); 
            // Success message
            enqueueSnackbar(response.data.message, { variant: response.data.status.toLowerCase() });
            // Close the modal on successful creation
            handleClose(); 
            // Call the onNewSession callback to refresh the sessions
            onNewSession();
        } catch (error: any) {
            if (error.response) {
                // Server responded with a status other than 200 range
                enqueueSnackbar(error.response.data.message, { variant: error.response.data.status.toLowerCase() });
            } else if (error.request) {
                // Request was made but no response received
                enqueueSnackbar('No response from server. Please try again later.', { variant: 'error' });
            } else {
                // Something else happened while setting up the request
                enqueueSnackbar('An unexpected error occurred. Please try again.', { variant: 'error' });
            }
            console.error('Error stopping session:', error);
        }
    };

    return (
        <Modal open={open} onClose={handleClose}>
            <Box className={styles.modalBox}>
                <Typography variant="h6" component="h2" gutterBottom>
                    Create New Session
                </Typography>
                <TextField
                    label="Session Name"
                    fullWidth
                    value={sessionName}
                    onChange={handleSessionNameChange}
                    margin="normal"
                />
                <br />
                <br />
                <Button variant="contained" color="primary" onClick={handleCreateSession}>
                    Create Session
                </Button>
            </Box>
        </Modal>
    );
};

export default CreateNewSession;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/about.tsx

import React from 'react';
import {
    Container,
    Typography,
    Paper,
    Button,
    Box, Grid2,
} from '@mui/material';

const AboutPage: React.FC = () => {
    return (
        <Container maxWidth="lg" sx={{ py: 6 }}>
            {/* Hero Section */}
            <Box sx={{ mb: 8, textAlign: 'center' }}>
                <Typography
                    variant="h3"
                    component="h1"
                    gutterBottom
                    sx={{
                        fontWeight: 600,
                        color: '#222',
                        fontSize: { xs: '2.5rem', md: '3.5rem' },
                    }}
                >
                    About NULL
                </Typography>
                <Typography
                    variant="h6"
                    component="p"
                    color="textSecondary"
                    sx={{
                        maxWidth: 800,
                        mx: 'auto',
                        fontSize: { xs: '1rem', md: '1.25rem' },
                        lineHeight: 1.8,
                        color: '#555'
                    }}
                >
                    Revolutionizing combat sports by integrating technology into sports headwear to monitor and give insights on your brain health.
                </Typography>
            </Box>

            {/* Mission Section */}
            <Box sx={{ my: 10 }}>
                <Paper elevation={3} sx={{ p: 6, backgroundColor: '#fafafa', textAlign: 'center', borderRadius: 3 }}>
                    <Typography
                        variant="h4"
                        gutterBottom
                        sx={{
                            fontWeight: 'bold',
                            color: '#1976d2',
                            mb: 2
                        }}
                    >
                        Our Motivation
                    </Typography>
                    <Typography
                        variant="body1"
                        sx={{
                            fontSize: '1.25rem',
                            lineHeight: 1.75,
                            color: '#444'
                        }}
                    >
                        our motivation is driven by the alarming risks of brain injuries in physical sports like boxing, football, and hockey. Studies show that 87% of boxers experience at least one concussion during their career, and in American football, 99% of NFL players studied showed signs of CTE. In ice hockey, concussions make up 15-30% of all injuries, raising serious concerns about long-term brain health. We are committed to using cutting-edge sensor technology to monitor impacts in real time, helping athletes reduce their risk of brain injuries and protect their future health.
                    </Typography>
                </Paper>
            </Box>

            {/* Vision Section */}
            <Box sx={{ my: 10 }}>
                <Paper elevation={3} sx={{ p: 6, backgroundColor: '#f4f7fc', textAlign: 'center', borderRadius: 3 }}>
                    <Typography
                        variant="h4"
                        gutterBottom
                        sx={{
                            fontWeight: 'bold',
                            color: '#1976d2',
                            mb: 2
                        }}
                    >
                        Our Vision
                    </Typography>
                    <Typography
                        variant="body1"
                        sx={{
                            fontSize: '1.25rem',
                            lineHeight: 1.75,
                            color: '#444'
                        }}
                    >
                        We envision a world where athletes are empowered by technology to prevent injuries,
                        optimize performance, and safeguard their long-term brain health,
                        ensuring a safer and more sustainable future for combat sports.
                    </Typography>
                </Paper>
            </Box>

            {/* Key Features Section */}
            <Box sx={{ my: 12 }}>
                <Typography
                    variant="h4"
                    gutterBottom
                    align="center"
                    sx={{
                        fontWeight: 'bold',
                        color: '#333',
                        mb: 5
                    }}
                >
                    Key Features
                </Typography>
                <Grid2 container spacing={4} justifyContent="center">
                    <Grid2 xs={12} md={4}>
                        <Paper
                            elevation={3}
                            sx={{
                                p: 4,
                                textAlign: 'center',
                                backgroundColor: '#fff',
                                borderRadius: 3
                            }}
                        >
                            <Typography
                                variant="h6"
                                gutterBottom
                                sx={{
                                    fontWeight: 'bold',
                                    color: '#1976d2',
                                    mb: 1.5
                                }}
                            >
                                Real-Time Impact Analysis
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#666',
                                    lineHeight: 1.7
                                }}
                            >
                                Our system uses an ESP32, accelerometer, and pressure sensors to measure the force of impacts during training and fights,
                                giving athletes and coaches real-time data to assess performance and risks.
                            </Typography>
                        </Paper>
                    </Grid2>
                    <Grid2 xs={12} md={4}>
                        <Paper
                            elevation={3}
                            sx={{
                                p: 4,
                                textAlign: 'center',
                                backgroundColor: '#fff',
                                borderRadius: 3
                            }}
                        >
                            <Typography
                                variant="h6"
                                gutterBottom
                                sx={{
                                    fontWeight: 'bold',
                                    color: '#1976d2',
                                    mb: 1.5
                                }}
                            >
                                Brain Health Monitoring
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#666',
                                    lineHeight: 1.7
                                }}
                            >
                                By leveraging accelerometers, we monitor head movement and acceleration to track potential brain trauma,
                                helping athletes avoid long-term injuries and providing a safer training environment.
                            </Typography>
                        </Paper>
                    </Grid2>
                    <Grid2 xs={12} md={4}>
                        <Paper
                            elevation={3}
                            sx={{
                                p: 4,
                                textAlign: 'center',
                                backgroundColor: '#fff',
                                borderRadius: 3
                            }}
                        >
                            <Typography
                                variant="h6"
                                gutterBottom
                                sx={{
                                    fontWeight: 'bold',
                                    color: '#1976d2',
                                    mb: 1.5
                                }}
                            >
                                Performance Insights & Session Tracking
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#666',
                                    lineHeight: 1.7
                                }}
                            >
                                Our platform offers comprehensive session tracking with detailed insights into each athlete's performance,
                                empowering data-driven training and progress monitoring over time.
                            </Typography>
                        </Paper>
                    </Grid2>
                </Grid2>
            </Box>

            {/* Call to Action */}
            <Box sx={{ textAlign: 'center', my: 10 }}>
                <Button
                    variant="contained"
                    color="primary"
                    size="large"
                    sx={{
                        fontSize: '1.2rem',
                        px: 6,
                        py: 2,
                        borderRadius: 3,
                        textTransform: 'none'
                    }}
                >
                    Learn More About Our Technology
                </Button>
            </Box>
        </Container>
    );
};

export default AboutPage;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/PlayerSessionView.tsx

import React from "react";
import api from "../../utils/api";
import { Typography, Stack, Grid2 } from "@mui/material";
import SessionLink from "../buttons/SessionLink";
import NewSession from "../buttons/NewSession";
import StopSession from "../buttons/StopSession";

interface PlayerSessionViewProps {
    userId: string;
    allowNewSession: boolean;
}

interface Session {
  session_id: string;
  session_name: string;
  time_start: string;
  time_end: string;
}

const PlayerSessionView: React.FC<PlayerSessionViewProps> = ({ userId, allowNewSession }) => {
  const [loading, setLoading] = React.useState<boolean>(true);
  const [sessions, setSessions] = React.useState<Session[]>([]);
  const [canMakeSession, setCanMakeSession] = React.useState<boolean>(false);

  const getUserSessions = async () => {
    setLoading(true);
    // Using the users' ID, get all the sessions they have previously created
    // This will be used to display the previous sessions on the landing page
    const response = await api.get(`/users/session/all`, { params: { user_id: userId } });
    // If there are sessions, reverse the list so most recent is first
    response.data.data.reverse();
    // Set the state to the session IDs
    setSessions(response.data.data || []);
    // Can only make a session if there are no active sessions
    if (sessions.length === 0) {
        // Can make a session if there are no sessions
        setCanMakeSession(true);
    }
    else {
        // Can make a session if the last session has ended
        setCanMakeSession(response.data.data[0].time_end !== null);
    }
    // Stop loading
    setLoading(false);
  };

  React.useEffect(() => {
    // Get user sessions on mount
    getUserSessions();
  }, []);

    return (
        <>
            <Stack direction="column" spacing={2} alignItems="flex-start" sx={{ maxWidth: '600px', width: '100%', marginBottom: '20px' }}>
                {
                allowNewSession && (
                    canMakeSession ? (
                    <NewSession onNewSession={getUserSessions} />
                    ) : (
                    <StopSession onStopSession={getUserSessions} />
                    )
                )
                }
            </Stack>
            <Grid2 container columns={3} columnGap={3} rowGap={3}>
            {loading ? (
                <Typography variant="body1" gutterBottom>
                Loading...
                </Typography>
            ) : Array.isArray(sessions) && sessions.length > 0 ? (
                sessions.map((s, index) => (
                <SessionLink
                    session={s}
                    key={index}
                />
                ))
            ) : (
                <Typography variant="body1" gutterBottom>
                You have no sessions, create a new one to get started!
                </Typography>
            )}
            </Grid2>
        </>
    );
};

export default PlayerSessionView;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/LandingPage.module.css

/* Main container of the landing page */
.mainBox {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #f0f0f0;
    backdrop-filter: blur(5px);
    padding: 2rem;
}

/* Header containing the welcome message and the new session button */
.headerBox {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/CoachSessionView.tsx

import React from "react";
import api from "../../utils/api";
import { Typography, Stack } from "@mui/material";
import SessionLink from "../buttons/SessionLink";
import NewSession from "../buttons/NewSession";
import StopSession from "../buttons/StopSession";
import PlayerSessionView from "./PlayerSessionView";
import AddPlayer from "../buttons/AddPlayer";

interface CoachSessionViewProps {
    userId: string;
}

interface Session {
  session_id: string;
  session_name: string;
  time_start: string;
  time_end: string;
}

interface Player {
    user_id: string;
    username: string;
}

const CoachSessionView: React.FC<CoachSessionViewProps> = ({ userId }) => {
    const [loading, setLoading] = React.useState<boolean>(true);
    const [players, setPlayers] = React.useState<Player[]>([]);
  
    const getCoachsPlayers = async () => {
      setLoading(true);
      // Using the user ID, get all the players that the coach has sessions with
      const response = await api.get(`/users/coach/players/`, { params: { user_id: userId } });;
      // Set the state to the session IDs
      setPlayers(response.data.data || []);
      // Stop loading
      setLoading(false);
    };
  
    // Get the players on mount
    React.useEffect(() => { getCoachsPlayers() }, []);
  
    return (
        <>
            <Stack direction="column" spacing={2} alignItems="flex-start" sx={{ maxWidth: '600px', width: '100%', marginBottom: '20px' }}>
                <AddPlayer onAddPlayer={getCoachsPlayers} />
            </Stack>
            {
                loading ? (
                    <Typography variant="body1" gutterBottom>
                        Loading players...
                    </Typography>
                ) : (
                    Array.isArray(players) && players.length > 0 ? (
                        players.map((p, index) => (
                            <>
                                <Typography variant="h5" gutterBottom textAlign={"left"}>
                                    {p.username}'s Sessions
                                </Typography>
                                <PlayerSessionView userId={p.user_id} allowNewSession={false} key={index} />
                            </>
                            
                        )
                    )
                    ) : (
                        <Typography variant="body1" gutterBottom>
                            Your team is empty! Add some players to get started.
                        </Typography>
                    )
                )
            }
        </>
    );
  };
  
  export default CoachSessionView;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/SessionPage.tsx

import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import Stats from "../Dashboard/Stats";
import { Box, Button, Typography } from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import api from "../../utils/api";
import LiveChart from "../Dashboard/LiveChart";
import BrainHealth from "../Dashboard/BrainHealth";

const SessionPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [sessionName, setSessionName] = useState<string | null>(null);

  const getQueryParams = () => {
    return new URLSearchParams(location.search);
  };

  const fetchSessionDetails = async (sessionId: string) => {
    try {
      const response = await api.get(`/session/${sessionId}`);
      setSessionName(response.data.session_name);
    } catch (error) {
      console.error("Error fetching session details", error);
    }
  };

  useEffect(() => {
    const sessionId = getQueryParams().get("session_id");
    if (sessionId) {
      fetchSessionDetails(sessionId);
    }
  }, [location.search]);

  return (
    <Box sx={{ padding: 2 }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 2,
        }}
      >
        {/* Back Button on the right */}
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate(-1)} // Navigate back to the previous page
          variant="outlined"
          sx={{ ml: "auto" }} // Ensure the button stays on the far right
        >
          Back
        </Button>
      </Box>

      <LiveChart sessionId={getQueryParams().get("session_id") || ""} />
      <Stats sessionId={getQueryParams().get("session_id") || ""} />
      <BrainHealth sessionId={getQueryParams().get("session_id") || ""} />
    </Box>
  );
};

export default SessionPage;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Pages/LandingPage.tsx

import React from "react";
import api from "../../utils/api";
import { Box, Typography, Stack, Button } from "@mui/material";
import RefreshIcon from '@mui/icons-material/Refresh';
import SessionLink from "../buttons/SessionLink";
import NewSession from "../buttons/NewSession";
import StopSession from "../buttons/StopSession";
import styles from "./LandingPage.module.css";
import PlayerSessionView from "./PlayerSessionView";
import CoachSessionView from "./CoachSessionView";

interface Session {
  session_id: string;
  session_name: string;
  time_start: string;
  time_end: string;
}

const LandingPage: React.FC = () => {

  const userId = localStorage.getItem("user_id") || "";
  const isCoach = localStorage.getItem("user_type") === "coach";
  const [refreshKey, setRefreshKey] = React.useState(0);

  const refresh = async () => {
    setRefreshKey(oldKey => oldKey + 1);
  };

  return (
    <Box className={styles.mainBox}>
      <Box className={styles.headerBox}>
        <Typography variant="h4">
          Hello {localStorage.getItem("username")} 👋
        </Typography>
        <Typography variant="h6" gutterBottom textAlign={"left"} padding={2}>
          Refresh Sessions:
          <Button variant="text" onClick={refresh} size="small">
            <RefreshIcon />
          </Button>
        </Typography>
      </Box>

      { isCoach ? <CoachSessionView key={refreshKey} userId={userId} /> : <PlayerSessionView key={refreshKey} userId={userId} allowNewSession={true} /> }

    </Box>
  );
};

export default LandingPage;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Dashboard/BrainHealth.tsx

import { useEffect, useState } from "react";
import api from "../../utils/api";
import { DASHBOARD_REFRESH_TIME } from "../../utils/constants";
import { Doughnut } from "react-chartjs-2";
import { getNumHits, getValues } from "../../utils/helpers";
import Insights from "./Insights";

interface LiveChartProps {
  sessionId: string;
}

interface DataPoint {
  timestamp: string;
  pressure_l: number;
  pressure_r: number;
  pressure_b: number;
  pressure_t: number;
  accel_x: number;
  accel_y: number;
  accel_z: number;
}

// Fetches session data based on the session ID stored in local storage
async function FetchSessionData(sessionId: string) {
  try {
    // Make the API call to fetch session stats
    const response = await api.get("/users/session/data", {
      params: { session_id: sessionId },
    });

    return response.data.data as DataPoint[];
  } catch (error) {
    console.error("Error fetching session data:", error);
    return []; // Handle error case appropriately
  }
}

export default function BrainHealth({ sessionId }: LiveChartProps) {
  const [health, setHealth] = useState(1);

  useEffect(() => {
    // Function that triggers every second
    const interval = setInterval(() => {
      calculateHealth();
    }, DASHBOARD_REFRESH_TIME);

    // Cleanup the interval when the component unmounts
    return () => clearInterval(interval);
  }, []);

  const calculateHealth = async () => {
    const sessionData = await FetchSessionData(sessionId);
    const values = getValues(sessionData);
    const numHits = getNumHits(values);
    const damage = numHits * 0.05;
    setHealth(1 - damage > 0 ? 1 - damage : 0);
  };

  return (
    <>
      <h1>Health: {health}</h1>
      <Doughnut
        data={{
          labels: ["", ""],
          datasets: [
            {
              data: [1 - health, health],
              backgroundColor: ["red", "green"],
              borderColor: ["black", "black"],
              borderWidth: 1,
            },
          ],
        }}
      />
      <h1>Insights:</h1>
      <Insights health={health} />
    </>
  );
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Dashboard/Insights.tsx

import React from "react";
import { Card, CardContent, Typography } from "@mui/material";

// Function to get title and message based on health value
const getInsights = (health: number) => {
  if (health === 1) {
    return {
      title: "All Clear!",
      message:
        "Your head has been well-protected. Keep playing safely and maintain your good form.",
    };
  } else if (health > 0.75) {
    return {
      title: "Minor Impacts",
      message:
        "You've taken a few hits, but nothing serious so far. Stay cautious, and be aware of the force of impacts.",
    };
  } else if (health > 0.5) {
    return {
      title: "Moderate Impacts Detected",
      message:
        "You've received some moderate impacts. It's a good idea to monitor the situation closely and avoid further hard hits.",
    };
  } else if (health > 0.25) {
    return {
      title: "Significant Impacts",
      message:
        "You've taken some serious hits. Consider taking a break and assessing if it's safe to continue playing.",
    };
  } else if (health > 0) {
    return {
      title: "Critical Impact Detected",
      message:
        "You've experienced a heavy blow to the head. Immediate medical attention is recommended to ensure there are no long-term effects.",
    };
  } else {
    return {
      title: "Emergency Situation",
      message:
        "Severe trauma detected. Immediate medical attention is necessary. Stop playing and seek emergency assistance right away.",
    };
  }
};

type InsightsProps = {
  health: number;
};

export const Insights: React.FC<InsightsProps> = ({ health }) => {
  const { title, message } = getInsights(health);

  return (
    <Card sx={{ maxWidth: 400, margin: "20px auto" }}>
      <CardContent>
        <Typography variant="h5" component="div">
          {title}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {message}
        </Typography>
      </CardContent>
    </Card>
  );
};

export default Insights;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Dashboard/Stats.tsx

import { useEffect, useState } from "react";
import api from "../../utils/api";
import { DASHBOARD_REFRESH_TIME } from "../../utils/constants";
import { getNumHits, getValues } from "../../utils/helpers";

interface LiveChartProps {
  sessionId: string;
}

interface DataPoint {
  timestamp: string;
  pressure_l: number;
  pressure_r: number;
  pressure_b: number;
  pressure_t: number;
  accel_x: number;
  accel_y: number;
  accel_z: number;
}

// Fetches session data based on the session ID stored in local storage
async function FetchSessionData(sessionId: string) {
  try {
    // Make the API call to fetch session stats
    const response = await api.get("/users/session/data", {
      params: { session_id: sessionId },
    });

    return response.data.data as DataPoint[];
  } catch (error) {
    console.error("Error fetching session data:", error);
    return []; // Handle error case appropriately
  }
}

export default function NumHits({ sessionId }: LiveChartProps) {
  const [numHits, setNumHits] = useState(0);
  const [biggestHit, setBiggestHit] = useState(0);
  const [mostVulnerable, setMostVulnerable] = useState("...");

  useEffect(() => {
    // Function that triggers every second
    const interval = setInterval(() => {
      calculateStats();
    }, DASHBOARD_REFRESH_TIME);

    // Cleanup the interval when the component unmounts
    return () => clearInterval(interval);
  }, []);

  const calculateStats = async () => {
    const sessionData = await FetchSessionData(sessionId);
    const values = getValues(sessionData);

    // Calculate numHits
    setNumHits(getNumHits(values));

    // Calculate biggestHit
    setBiggestHit(Math.round(Math.max(...values)));

    // Calculate vulnerableSide
    const leftDamage: [number, string] = [
      sessionData
        .map((dataPoint) => dataPoint.pressure_l)
        .reduce((a, b) => a + b, 0),
      "Left",
    ];
    const rightDamage: [number, string] = [
      sessionData
        .map((dataPoint) => dataPoint.pressure_r)
        .reduce((a, b) => a + b, 0),
      "Right",
    ];
    const topDamage: [number, string] = [
      sessionData
        .map((dataPoint) => dataPoint.pressure_t)
        .reduce((a, b) => a + b, 0),
      "Top",
    ];
    const backDamage: [number, string] = [
      sessionData
        .map((dataPoint) => dataPoint.pressure_b)
        .reduce((a, b) => a + b, 0),
      "Back",
    ];

    const sides: [number, string][] = [
      leftDamage,
      rightDamage,
      topDamage,
      backDamage,
    ];

    sides.sort((a, b) => b[0] - a[0]);

    setMostVulnerable(sides[0][1]);
  };

  return (
    <>
      <div>
        <p># hits taken:</p>
        <h1>{numHits}</h1>
      </div>
      <div>
        <p>biggest hit:</p>
        <h1>{biggestHit}</h1>
      </div>
      <div>
        <p>most vulnerable</p>
        <h1>{mostVulnerable}</h1>
      </div>
    </>
  );
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/components/Dashboard/LiveChart.tsx

import { Line } from "react-chartjs-2";
import "chart.js/auto";
import zoomPlugin from "chartjs-plugin-zoom";
import { Chart as ChartJS } from "chart.js";
import { useEffect, useState } from "react";
import api from "../../utils/api";
import {
  DASHBOARD_REFRESH_TIME,
  LIVE_CHART_CAPACITY,
} from "../../utils/constants";
import { getValues } from "../../utils/helpers";

ChartJS.register(zoomPlugin);

interface LiveChartProps {
  sessionId: string;
}

interface DataPoint {
  timestamp: string;
  pressure_l: number;
  pressure_r: number;
  pressure_b: number;
  pressure_t: number;
  accel_x: number;
  accel_y: number;
  accel_z: number;
}

// Fetches session data based on the session ID stored in local storage
async function FetchSessionData(sessionId: string) {
  try {
    // Make the API call to fetch session stats
    const response = await api.get("/users/session/data", {
      params: { session_id: sessionId },
    });

    // Return the data received from the API
    const values = getValues(response.data.data as DataPoint[]);

    return values;
  } catch (error) {
    console.error("Error fetching session data:", error);
    return []; // Handle error case appropriately
  }
}

// Initial chart data
const initialData = {
  labels: [""],
  datasets: [
    {
      label: "My dataset",
      data: [0],
      fill: true,
      backgroundColor: "rgba(75,192,192,0.2)",
      borderColor: "rgba(75,192,192,1)",
    },
  ],
};

export default function LiveChart({ sessionId }: LiveChartProps) {
  const [data, setData] = useState(initialData);
  let alsoData = initialData;

  useEffect(() => {
    // Function that triggers every second
    const interval = setInterval(() => {
      handleAddEntries();
    }, DASHBOARD_REFRESH_TIME);

    // Cleanup the interval when the component unmounts
    return () => clearInterval(interval);
  }, []);

  // Calculate the maximum y-axis value dynamically (110% of highest value in dataset)
  const getMaxValue = () => {
    const allData = data.datasets.flatMap((dataset) => dataset.data);
    const maxValue = Math.max(...allData);
    return Math.round(maxValue * 1.1); // Set max value to 110% of highest value
  };

  const addNewEntries = (newValues: number[]) => {
    const currentLength = alsoData.datasets[0].data.length;
    const proposedLength = currentLength + newValues.length;

    const newLabels = Array(proposedLength).fill("");
    const newPoints = [...alsoData.datasets[0].data, ...newValues];

    const newData = {
      labels: newLabels,
      datasets: [
        {
          ...alsoData.datasets[0],
          data: newPoints,
        },
      ],
    };

    alsoData = newData;
    setData(newData);
  };

  const handleAddEntries = async () => {
    const allSessionValues = await FetchSessionData(sessionId);

    const potentialValues = [0, ...allSessionValues];
    const currentValues = alsoData.datasets[0].data;
    const areEqual =
      JSON.stringify(potentialValues) === JSON.stringify(currentValues);

    if (!areEqual) {
      console.log("not equal");
      console.log(currentValues);
      console.log(potentialValues);

      const valuesToUse =
        alsoData.datasets[0].data.length == 1
          ? allSessionValues
          : allSessionValues.slice(-10);

      addNewEntries(valuesToUse);
    } else {
      console.log("equal so dont update");
    }
  };

  return (
    <Line
      data={data}
      options={{
        scales: {
          y: {
            beginAtZero: true,
            min: 0,
            max: getMaxValue(), // Set the max dynamically
          },
        },
        plugins: {
          zoom: {
            pan: {
              enabled: true,
              mode: "x",
              scaleMode: "x",
            },
            zoom: {
              wheel: {
                enabled: true, // Enable wheel zooming
              },
              mode: "x",
            },
          },
        },
      }}
    />
  );
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/utils/constants.ts

export const LIVE_CHART_CAPACITY = 100;
export const HIT_THRESHOLD = 400
export const DASHBOARD_REFRESH_TIME = 1000;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/utils/helpers.ts

import { HIT_THRESHOLD } from "./constants";

interface DataPoint {
    timestamp: string;
    pressure_l: number;
    pressure_r: number;
    pressure_b: number;
    pressure_t: number;
    accel_x: number;
    accel_y: number;
    accel_z: number;
  }

export function getNumHits(values: number[]) {
    let hitCount = 0;
    let isAboveThreshold = false;

    for (let i = 0; i < values.length; i++) {
      const currentNumber = values[i];

      if (currentNumber > HIT_THRESHOLD && !isAboveThreshold) {
        hitCount++;
        isAboveThreshold = true;
      } else if (currentNumber <= HIT_THRESHOLD) {
        isAboveThreshold = false;
      }
    }
    return hitCount
}


export function getValues(sessionData: DataPoint[]) {
    return sessionData.map(
        (dataPoint) =>
          dataPoint.pressure_l +
          dataPoint.pressure_r +
          dataPoint.pressure_t +
          dataPoint.pressure_b
      )
}


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/utils/api.ts

import axios from 'axios';

const api = axios.create({
    // Digital Ocean Droplet IP
    baseURL: "http://104.131.48.249:8000/",
});

export default api;


# ======================================================= #
# /home/deathyvoid/HackTheValley/frontend/src/assets/react.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
